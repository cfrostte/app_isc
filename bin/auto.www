#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('lab1_app_isc:server');
var http = require('http');

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);


var server = http.createServer(app);

var io = require("socket.io")(server);

io.on("connection", function(cliente) {
  
   console.log("Cliente conectado");
  
   cliente.on("enviarDatos", function(datos) {
    
     console.log("funcion enviarDatos");

     switch(datos) {
      
       case "encenderLED" :
         console.log("envio a MCU encenderLED");
         io.emit("enviarDatosalMCU", "encenderLED");
  
       break;
      
      case "apagarLED" :
        console.log("envio a MCU apagarLED");
        io.emit("enviarDatosalMCU", "apagarLED");
        break;

      case "acelerarDron" :
        console.log("envio a MCU acelerarDron");
        io.emit("enviarDatosalMCU", "acelerarDron");
      break;
      
      case "retrocederDron" :
        console.log("envio a MCU retrocederDron");
        io.emit("enviarDatosalMCU", "retrocederDron");
      break;

      case "izquierdaDron" :
        console.log("envio a MCU izquierdaDron");
        io.emit("enviarDatosalMCU", "izquierdaDron");
      break;

      case "derechaDron" :
        console.log("envio a MCU derechaDron");
        io.emit("enviarDatosalMCU", "derechaDron");
      break;

      case "frenarDron" :
        console.log("envio a MCU frenarDron");
        io.emit("enviarDatosalMCU", "frenarDron");
      break;    
     }

   });

})

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    return val;
  }

  if (port >= 0) {
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
